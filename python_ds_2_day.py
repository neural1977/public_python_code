# -*- coding: utf-8 -*-
"""python_ds_2_day.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CFflwMiEEvhVwQ_Pb5cry8jNa2zTjapu
"""

!pip install numpy

def calculate_occurrencies(input_string):
  ''' Calculate the occurrencies of each character in an input string '''
  d_temp = {}

  for char in input_string.lower():
    occ = d_temp.get(char, 0)
    if occ == 0: 
      d_temp.update({char : 1})
    else: 
      d_temp[char] += 1

  # make all this as a comprehension or map or filter 
  

  return d_temp

import numpy as np

S = ["This Workshop is Fantastic", "My Students are brillant"]
list_histogram = []
for s in S: 
  list_histogram.append(calculate_occurrencies(input_string = s))

print(list_histogram)

class Point: 
  def __init__(self, x = 0, y = 0): 
    self.x = x
    self.y = y

    def __del__(self):
      class_name = self.__class__.__name__
      print(class_name, "destroyed")

pt1 = Point()
pt2 = Point(2, 4)
pt3 = Point(1, 2)

print(id(pt1))
print(id(pt2))
print(id(pt3))

del pt1
del pt2
del pt3

class JustCounter: 
  __secret_count = 0      # __ makes a private attribute
  inner_var = 0           # public attribute o class variable

  def count(self):
    self.__secret_count += 1
    self.inner_var = 5
    print(self.__secret_count)

"""#**Class Instantiation**"""

counter = JustCounter()

counter.count()

counter.count()

print(counter.inner_var)

print(counter._JustCounter__secret_count)